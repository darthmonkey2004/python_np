#!/bin/bash
#TODO: server:
#		1. sftp ssh provider, mount sshfs, watch io file for instructions
#		2. shared sshfs resources (media, (io?))
#				-or-
#		3. server sends message to clients with execAt timestamp, and file uri.


setup() {
	read -p "Enter remote player ip: " remote_ip
	read -p "Use user '$USER'? (y/n): " yn
	if [ "$yn" = "y" ]; then
		user="$USER"
	else
		read -p "Enter username: " user
	fi
	echo '#!/bin/bash' > "$remote_conf"
	echo "export NP_REMOTE_USER='$user'" >> "$remote_conf"
	echo "export NP_REMOTE_IP='$remote_ip'" >> "$remote_conf"
	echo "export NP_LOCAL_USER='$USER'" >> "$remote_conf"
	localip=$(ip -o -4 a s | awk -F'[ /]+' '$2!~/lo/{print $4}')
	echo "$export NP_LOCAL_IP='$localip'" >> "$remote_conf"
	echo "Connection source file created!"
	echo ""
	echo "1. Server (Machine in which all media files are stored)"
	echo "2. Player (Remote machine you will be accessing files from)"
	read -p "Enter configuration option: (1 or 2)" opt
	if [ "$opt" = "1" ]; then
		echo "creating rsa key..."
		ssh-keygen
		echo "Copying key to remote machine..."
		ssh-copy-id "$user@$remote_ip"
		echo "Setup finished! Remote *might* work?"
	else
		echo "Setup probably finished. Who knows?"
	fi
}

reset() {
	ssh "$NP_CONNSTRING" "export DISPLAY=:0; python3 -c \"import np; conf = np.readConf(); conf['nowplaying']['filepath'] = None; np.writeConf(conf); exit()\"; exit"
}

update() {
	ssh "$NP_CONNSTRING" "cd \"$HOME\"; if [ -d python_np ]; then rm -rf python_np; fi; git clone 'https://github.com/darthmonkey2004/python_np.git'; cd python_np/dist; pip3 install --user 'np-1.0.tar.gz'"
}

com() {
	com="$1"
	echo "Executing: '$com'"
	ssh "$NP_CONNSTRING" "cd '$HOME/.np'; echo '$com' > nplayer.com"
}





commands() {
	commands=('debug', 'hide_gui', 'show_gui', 'move_gui', 'move_player', 'seek' 'setup' 'reset' 'update' 'commands' 'start' 'readConf' 'clearLog' 'play' 'pause' 'stop' 'skip_next' 'skip_prev' 'vol_set' 'vol_up' 'vol_down' 'mute' 'unmute' 'quit' 'load' 'yt' 'play_mode' 'play_type')
	echo "Command list:"
	pos=0
	for com in "${commands[@]}"; do
		pos=$(( pos + 1 ))
		echo "$pos:$com"
	done
}

start() {
	ssh "$NP_CONNSTRING" "export DISPLAY=:0; python3 '/home/monkey/.local/bin/np'"& disown
	sleep 2
	com "vol_set=30"
}

readConf() {
	ssh "$NP_CONNSTRING" "export DISPLAY=:0; python3 -c 'import np; conf = np.readConf(); print (conf); exit()'"
}

readLog() {
	ssh "$NP_CONNSTRING" "cd '$HOME/.np'; cat nplayer.log"
}

clearLog() {
	echo "Clearing log..."
	ssh "$NP_CONNSTRING" "cd '$HOME/.np'; rm nplayer.log; touch nplayer.log"
	echo "Log cleared!"
}
remote_conf="$HOME/.np/np.remote.conf"
if [ ! -f "$remote_conf" ]; then
	setup
fi
. "$remote_conf"
if [ -n "$1" ]; then
	func="$1"
fi
if [ -n "$2" ]; then
	if [ "$2" = "local" ] || [ "$2" = "-l" ] || [ "$2" = "--local" ]; then
	method="local"
	export NP_CONNSTRING="$NP_LOCAL_USER@$NP_LOCAL_IP"
else
	method="remote"
	export NP_CONNSTRING="$NP_REMOTE_USER@$NP_REMOTE_IP"
fi
echo "Function: '$func', Method: '$method'"
echo "Use 'np.remote commands' or '-h/--help' flag for a list of options."
if [ "$func" = "reset" ]; then
	reset
elif [ "$func" = "update" ]; then
	update
elif [ "$func" = "start" ]; then
	start
elif [ "$func" = "readConf" ]; then
	readConf
elif [ "$func" = "readLog" ]; then
	readLog
elif [ "$func" = "clearLog" ]; then
	clearLog
elif [ "$func" = "commands" ] || [ "$func" = "-h" ] || [ "$func" = "--help" ] || [ "$func" = "help" ]; then
	commands
elif [ "$func" = "setup" ] || [ "$func" = "-s" ] || [ "$func" = "--setup" ]; then
	setup
else
	com "$func"
fi
